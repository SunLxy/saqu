(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([["core_README_md"],{72074:function(n,e,r){"use strict";r.r(e),r.d(e,{default:function(){return s}});var s={components:{},data:{},source:"saqu\n===\n\n## 参考对象\n\n1. 参考 `react-scripts` webpack 进行 配置\n\n## 功能\n\n- [X] 正常的项目进行打包和开发\n- [X] md文档解析代码块进行渲染\n- [X] import引入替换\n- [X] 支持自动对入口文件进行生成\n- [X] 支持自动生成路由\n- [ ] 添加项目`app.{ts,tsx,jsx,js}`可以对路由之类的进行操作和配置\n- [ ] 添加支持直接使用md文件做路由进行渲染md内容\n\n## 安装\n\n```bash\n$ npm install saqu # yarn add saqu\n```\n## 命令\n\n```bash\nUsage: saqu [start|build] [--help|h]\n  Displays help information.\nOptions:\n  --help, -h              Displays help information.\nExample:\n$ saqu  build\n$ saqu  start\n\n```\n\n## 快速创建项目\n\n```bash\n$ npx create-saqu my-app\n```\n\n## 配置参数\n\n```ts\nimport { RspackOptions, SwcJsMinimizerRspackPluginOptions } from '@rspack/core';\nimport express from 'express';\nimport { MockerProxyRoute, MockerOption } from 'mocker-api';\nimport { DevServer } from '@rspack/core';\nimport yargsParser from 'yargs-parser';\n\n/**\n * @description rspack 运行配置\n */\nexport interface SAquConfig extends RspackOptions {\n  /**\n   * @description 配置代理，可用于解决跨域等问题\n   * @example\n   * proxy: {\n   *  '/api': {\n   *    target: 'http://localhost:3000',\n   *    changeOrigin: true,\n   *  },\n   * },\n   * */\n  proxy?: DevServer['proxy'];\n  /**\n   * @description mocker代理\n   **/\n  proxySetup?: (app: express.Application) =>\n    | {\n        path?: string | string[] | MockerProxyRoute;\n        options?: MockerOption;\n      }\n    | undefined;\n  /**\n   * @description 重写环境配置\n   */\n  overridesRspack?: (\n    config: RspackOptions,\n    env: 'development' | 'production' | 'preview',\n    argvOptions: SAquArgvOptions,\n    type: 'server' | 'client',\n  ) => Promise<RspackOptions> | RspackOptions;\n\n  /**用来压缩 JS 产物 配置*/\n  _JS_minifyOptions?: SwcJsMinimizerRspackPluginOptions;\n}\n\n/**\n * @description 命令行参数\n */\nexport interface SAquArgvOptions extends yargsParser.Arguments {\n  /**\n   * @description 使用 webpack-bundle-analyzer\n   */\n  analyze?: boolean;\n  /**输出目录*/\n  dir?: string;\n  /**帮助*/\n  help?: boolean;\n  /**帮助(简写)*/\n  h?: boolean;\n}\n\n```\n\n## 基础配置\n\n```ts\n// .saqurc.ts\nimport { defineConfig } from \"saqu\"\n\nexport default ()=>defineConfig({\n  // ...配置\n})\n\n```\n\n## 重写配置\n\n```ts\n// .saqurc.ts\nimport { defineConfig } from \"saqu\"\n\nexport default ()=>defineConfig({\n  // ...配置\n  overridesRspack:(config,env,argvOptions,type)=>{\n    return config;\n  }\n})\n\n```\n\n## 插件使用\n\n```ts\n// .saqurc.ts\nimport { defineConfig } from \"saqu\"\nimport createRoutes from '@saqu/auto-config-to-routes';\n\nexport default ()=>defineConfig({\n  // ...配置\n  plugins: [new createRoutes()],\n})\n\n```\n\n## `entry`配置\n\n默认入口文件`src/index.{js|tsx|jsx}`\n\n当使用`!`开头的路径时，不进行校验文件是否存在(适用于自动生成入口文件)\n\n其他情况会进行校验入口文件是否存在\n\n```ts\n// .saqurc.ts\nimport { defineConfig } from \"saqu\"\nimport createRoutes from '@saqu/auto-config-to-routes';\n\nexport default ()=>defineConfig({\n  // ...配置\n  entry: '!src/.cache/main.jsx',\n})\n\n```\n",headings:[],headingsList:[]}}}]);